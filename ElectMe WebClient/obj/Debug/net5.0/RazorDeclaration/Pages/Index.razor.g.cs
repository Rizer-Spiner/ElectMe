// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ElectMe_WebClient.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\_Imports.razor"
using ElectMe_WebClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\_Imports.razor"
using ElectMe_WebClient.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\Pages\Index.razor"
using ElectMe_WebClient.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\Pages\Index.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\Pages\Index.razor"
using ElectMe_WebClient.ECIES.util;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 49 "D:\ralup\VIA\SCP\ElectMeProject\ElectMe WebClient\Pages\Index.razor"
 
    ///stuff the view should know
    private Credentials identity = new();

    private void InvalidCredentials()
    {
        Console.WriteLine("Invalid Credentials");
    }

    private string errorMessage = "";

    private async void HandleLoginAttempt()
    {
        if (!await LoginService.initializeEncryptionVariables())
            errorMessage = "Could not connect to the server";
        Login();
    }

    private async void Login()
    {
        switch (await LoginService.sendLoginRequest(identity))
        {
            case MyEnum.Unauthorized:
            {
                NavManager.NavigateTo("/error");
                break;
            }
            case MyEnum.Fail:
            {
                NavManager.NavigateTo("/error");
                break;
            }
            case MyEnum.Successful:
            {
                NavManager.NavigateTo("/vote");
                break;
            }
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    // if (verifyMessage(loginResultString))
    // {
    //     LoginResult loginResult = decryptLoginResult(loginResultString);
    //     if (loginResult.Status.Equals(200))
    //     {
    //         setElectMeVariables(loginResult);
    //         NavManager.NavigateTo("/vote");
    //     }
    //     else
    //     {
    //         Console.WriteLine("Login Attempt failed ");
    //         NavManager.NavigateTo("/error");
    //     }
    // }
    // else
    // {
    //     Console.WriteLine("Verification of message coming from Server failed");
    //     NavManager.NavigateTo("/error");
    // }

    ///stuff that need to be moved later on lower layers
  



    
    // private LoginResult decryptLoginResult(string loginResultString)
    // {
    //     byte[] encryptedLoginResult = MAC.extractEncryptedContent(
    //         Encoding.ASCII.GetBytes(loginResultString), ClientVariables.KMac);
    //     string LoginResult = new AesEncryptionProvider(ClientVariables.Kenc)
    //         .Decrypt(encryptedLoginResult, ClientVariables.Kenc);
    //     return JsonSerializer.Deserialize<LoginResult>(LoginResult);
    // }
    //
    //
    // private bool verifyMessage(string responseLoginResult)
    // {
    //     return MAC.VerifyTag(Encoding.ASCII.GetBytes(responseLoginResult), ClientVariables.KMac);
    // }
    //
    // private void setElectMeVariables(LoginResult loginResult)
    // {
    //     ClientVariables.DeviceToken = loginResult.DeviceToken;
    //     ClientVariables.VoteToken = loginResult.VoteToken;
    // }
    
    // private void setClientVariables(string package)
    // {
    //     JsonSerializerOptions serializerOptions = new JsonSerializerOptions();
    //     serializerOptions.Converters.Add(new BigIntegerConverter());
    //     InitialPackage initialPackage = JsonSerializer.Deserialize<InitialPackage>(package, serializerOptions);
    //
    //     ClientVariables.Puk = KeyGeneration.calculatePublicKey(
    //         ClientVariables.Prk, initialPackage.EllipticCurve);
    //     EllipticCurvePoint sharedKey = KeyGeneration.calculateMasterKey(
    //         ClientVariables.Prk, initialPackage.ServerPuk, initialPackage.EllipticCurve);
    //     ClientVariables.EllipticCurve = initialPackage.EllipticCurve;
    //     ClientVariables.NiosKey = initialPackage.NiosKey;
    //     ClientVariables.Kenc = KDF.DeriveKey(Encoding.ASCII.GetBytes(sharedKey.x.ToString()), KDF.DefaultRoundsEnc);
    //     ClientVariables.KMac = KDF.DeriveKey(Encoding.ASCII.GetBytes(sharedKey.x.ToString()), KDF.DefaultRoundsMac);
    // }
    //
    //
    // private string getEncodedPackage(string initialPackage)
    // {
    //     byte[] signatureKey = KDF.DeriveKey(ClientVariables.CertificateAuthority, KDF.DefaultRoundsMac);
    //     byte[] encryptionKey = KDF.DeriveKey(ClientVariables.CertificateAuthority, KDF.DefaultRoundsEnc);
    //     byte[] encryptedInitialPackage =
    //         MAC.extractEncryptedContent(Encoding.ASCII.GetBytes(initialPackage), signatureKey);
    //     return new AesEncryptionProvider(encryptionKey).Decrypt(encryptedInitialPackage, encryptionKey);
    // }
    //
    // private bool verifyInitialPackage(string initialPackage)
    // {
    //     byte[] signatureKey = KDF.DeriveKey(ClientVariables.CertificateAuthority, KDF.DefaultRoundsMac);
    //     return MAC.VerifyTag(Encoding.ASCII.GetBytes(initialPackage), signatureKey);
    // }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.LoginService LoginService { get; set; }
    }
}
#pragma warning restore 1591
