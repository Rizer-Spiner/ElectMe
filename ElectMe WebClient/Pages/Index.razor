@page "/"
@using ElectMe_WebClient.Models
@using ElectMe_WebClient.HTTP
@using System.Security.Cryptography
@using System.Text
@using System.Text.Json
@using ElectMe_WebClient.ECIES
@using ElectMe_WebClient.ECIES.Common.ECC
@using ElectMe_WebClient.ECIES.ECDSA
@using ElectMe_WebClient.ECIES.KeyGeneration
@using ElectMe_WebClient.ECIES.util
@using ElectMe_WebServer.Models



@inject NavigationManager NavManager
<h1>Hello, voter!</h1>

Are you ready to vote?

<div aria-colspan="12" align="center">
    <EditForm Model="@identity" OnValidSubmit="@HandleLoginAttempt" OnInvalidSubmit="@InvalidCredentials">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div id="cpr">
            <div align="center" aria-colspan="3"> Cpr number:</div>
            <div align="center" aria-colspan="9">
                <InputText id="Cpr nummer" @bind-Value="identity.Cpr"></InputText>
            </div>
        </div>

        <br/>
        <div id="cpr">
            <div align="center" aria-colspan="3"> Pin code:</div>
            <div align="center" aria-colspan="9">
                <InputText type="password" id="Kode pin" @bind-Value="identity.Pin"></InputText>
            </div>
        </div>

        <br/>

        <button type="submit">Login</button>
    </EditForm>
</div>


@code
{
    
    ///stuff the view should know
    private Identity identity = new();

    private void InvalidCredentials()
    {
        Console.WriteLine("Invalid Credentials");
    }

    private void HandleLoginAttempt()
    {
        Task<string> initialPackage = new HttpRequester().RetrieveMessage("/connect");
        while (!initialPackage.IsCompleted)
        {
            Console.WriteLine("waiting...");
        }
        if (verifyInitialPackage(initialPackage.Result))
        {
            setClientVariables(getEncodedPackage(initialPackage.Result));
            Login();
        }
        else
        {
            Console.WriteLine("CA verification failed");
            Console.WriteLine(initialPackage.Result);
            NavManager.NavigateTo("/error");
        }
    }

    private void Login()
    {
        Task<HttpResponseMessage> responseLoginResult = sendLoginRequest();
        while (!responseLoginResult.IsCompleted)
        {
            Console.WriteLine("waiting...");
        }

        string loginResultString = responseLoginResult.Result.Content.ReadAsStringAsync().Result;

        if (verifyMessage(loginResultString))
        {
            LoginResult loginResult = decryptLoginResult(loginResultString);
            if (loginResult.Status.Equals(200))
            {
                setElectMeVariables(loginResult);
                NavManager.NavigateTo("/vote");
            }
            else
            {
                Console.WriteLine("Login Attempt failed ");
                NavManager.NavigateTo("/error");
            }
           
        }
        else
        {
         
            Console.WriteLine("Verification of message coming from Server failed");
            NavManager.NavigateTo("/error");
        }
    }

    
    
    
    
    ///stuff that need to be moved later on lower layers
    private LoginResult decryptLoginResult(string loginResultString)
    {
        byte[] encryptedLoginResult = MAC.extractEncryptedContent(
            Encoding.ASCII.GetBytes(loginResultString), ClientVariables.KMac);
        string LoginResult = new AesEncryptionProvider(ClientVariables.Kenc)
            .Decrypt(encryptedLoginResult, ClientVariables.Kenc);
        return JsonSerializer.Deserialize<LoginResult>(LoginResult);
    }


    private bool verifyMessage(string responseLoginResult)
    {
        return MAC.VerifyTag(Encoding.ASCII.GetBytes(responseLoginResult), ClientVariables.KMac);
    }

    private void setElectMeVariables(LoginResult loginResult)
    {
        ClientVariables.DeviceToken = loginResult.DeviceToken;
        ClientVariables.VoteToken = loginResult.VoteToken;
    }

    private Task<HttpResponseMessage> sendLoginRequest()
    {
        LoginForm loginForm = new()
        {
            ClientPuk = ClientVariables.Puk,
            EncryptedCredentials = new AesEncryptionProvider(ClientVariables.NiosKey)
                .Encrypt(JsonSerializer.Serialize(identity), ClientVariables.NiosKey),
            HashedCPR = new SHA256Managed().ComputeHash(
                Encoding.ASCII.GetBytes(identity.Cpr))
        };

        JsonSerializerOptions serializerOptions = new JsonSerializerOptions();
        serializerOptions.Converters.Add(new BigIntegerConverter());

        string loginMessage = JsonSerializer.Serialize(Signing.signMessage(
            JsonSerializer.Serialize(loginForm), ClientVariables.EllipticCurve, ClientVariables.Prk), serializerOptions);
        return new HttpRequester().PostMessage(loginMessage, "/login");
    }


    private void setClientVariables(string package)
    {
        JsonSerializerOptions serializerOptions = new JsonSerializerOptions();
        serializerOptions.Converters.Add(new BigIntegerConverter());
        InitialPackage initialPackage = JsonSerializer.Deserialize<InitialPackage>(package, serializerOptions);

        ClientVariables.Puk = KeyGeneration.calculatePublicKey(
            ClientVariables.Prk, initialPackage.EllipticCurve);
        EllipticCurvePoint sharedKey = KeyGeneration.calculateMasterKey(
            ClientVariables.Prk, initialPackage.ServerPuk, initialPackage.EllipticCurve);
        ClientVariables.EllipticCurve = initialPackage.EllipticCurve;
        ClientVariables.NiosKey = initialPackage.NiosKey;
        ClientVariables.Kenc = KDF.DeriveKey(Encoding.ASCII.GetBytes(sharedKey.x.ToString()), KDF.DefaultRoundsEnc);
        ClientVariables.KMac = KDF.DeriveKey(Encoding.ASCII.GetBytes(sharedKey.x.ToString()), KDF.DefaultRoundsMac);
    }


    private string getEncodedPackage(string initialPackage)
    {
        byte[] signatureKey = KDF.DeriveKey(ClientVariables.CertificateAuthority, KDF.DefaultRoundsMac);
        byte[] encryptionKey = KDF.DeriveKey(ClientVariables.CertificateAuthority, KDF.DefaultRoundsEnc);
        byte[] encryptedInitialPackage = 
            MAC.extractEncryptedContent(Encoding.ASCII.GetBytes(initialPackage), signatureKey);
        return new AesEncryptionProvider(encryptionKey).Decrypt(encryptedInitialPackage, encryptionKey);

    }

    private bool verifyInitialPackage(string initialPackage)
    {
        byte[] signatureKey = KDF.DeriveKey(ClientVariables.CertificateAuthority, KDF.DefaultRoundsMac);
        return MAC.VerifyTag(Encoding.ASCII.GetBytes(initialPackage), signatureKey);
    }
}