@page "/"
@using ElectMe_WebClient.Models

@using System.Net.Http.Json
@using System.Text
@using ElectMe_WebClient.ECIES
@using ElectMe_WebClient.ECIES.KeyGeneration
@using ElectMe_WebClient.ECIES.util
@using ElectMe_WebServer.Models
@using Newtonsoft.Json
@using System.Net.Http.Headers
@using System.Text.Json
@using System.IO
@using JsonSerializer = Newtonsoft.Json.JsonSerializer


@inject HttpClient Http
@inject NavigationManager NavManager
<h1>Hello, voter!</h1>

Are you ready to vote?

<div aria-colspan="12" align="center">
    <EditForm Model="@identity" OnValidSubmit="@HandleLoginAttempt" OnInvalidSubmit="@InvalidCredentials">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div id="cpr">
            <div align="center" aria-colspan="3"> Cpr number:</div>
            <div align="center" aria-colspan="9">
                <InputText id="Cpr nummer" @bind-Value="identity.Cpr"></InputText>
            </div>
        </div>

        <br/>
        <div id="cpr">
            <div align="center" aria-colspan="3"> Pin code:</div>
            <div align="center" aria-colspan="9">
                <InputText type="password" id="Kode pin" @bind-Value="identity.Pin"></InputText>
            </div>
        </div>

        <br/>

        <button type="submit">Login</button>
    </EditForm>
</div>


@code
{
    private Identity identity = new();

    private void HandleLoginAttempt()
    {
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri("https://localhost:5001");
        httpClient.DefaultRequestHeaders.Accept.Add(
            new MediaTypeWithQualityHeaderValue("text/json"));
    // Task<CA> certificateTask = Http.GetFromJsonAsync<CA>("https://localhost:5001/connect");
    //
    // while (!certificateTask.IsCompleted)
    // {
    //     Console.WriteLine("Waiting for CA....");
    // }
    //
    // Console.WriteLine(certificateTask.Status.ToString());

    // CA certificate = certificateTask.Result;

        HttpResponseMessage responseMessage = httpClient.GetAsync("/connect").Result;


    // Parse the response body.


        var json = responseMessage.Content.ReadAsStringAsync().Result;
        
        JsonSerializerSettings jsonSerializerSettings = new JsonSerializerSettings();
        jsonSerializerSettings.Converters.Add(new BigIntegerConverter());
        var initial = JsonConvert.DeserializeObject<InitialPackage>(json, jsonSerializerSettings);
        Console.WriteLine(initial.EllipticCurve.a);

        

    // if (verifyCA(certificate))
    // {
    //     ClientVariables.Puk = KeyGeneration.calculatePublicKey(ClientVariables.Prk, certificate.EllipticCurve.G, certificate.EllipticCurve);
    //     EllipticCurvePoint shareKey = KeyGeneration.calculatePublicKey(ClientVariables.Prk, certificate.ServerPuk, certificate.EllipticCurve);
    //
    //     ClientVariables.Kenc = KDF.DeriveKey(Encoding.ASCII.GetBytes(shareKey.x.ToString()), KDF.DefaultRoundsEnc);
    //     ClientVariables.KMac = KDF.DeriveKey(Encoding.ASCII.GetBytes(shareKey.x.ToString()), KDF.DefaultRoundsMac);
    //     
    //     AesEncryptionProvider aes = new AesEncryptionProvider(Encoding.ASCII.GetBytes(shareKey.x.ToString()));
    //     byte[] encryptedCredentials = aes.Encrypt(JsonConvert.SerializeObject(identity), certificate.NiosKey);
    //
    //     LoginForm loginForm = new()
    //     {
    //         ClientPuk = ClientVariables.Puk,
    //         EncryptedCredentials = Encoding.ASCII.GetString(encryptedCredentials)
    //     };
    //
    //     string signedLoginForm = signLoginForm(loginForm, certificate.ServerPuk);
    //     
    //     StringContent httpContent = new StringContent(signedLoginForm, Encoding.UTF8, "application/json");
    //
    //
    //     Task<HttpResponseMessage> loginResultTask =  Http.PostAsync("https://localhost:5001/ElectMe/login", httpContent);
    //
    //     while (!loginResultTask.IsCompleted)
    //     {
    //         Console.WriteLine("Waiting for Login response...");
    //     }
    //
    //     string loginResult = loginResultTask.Result.Content.ToString();
    //
    //     if (MAC.VerifyTag(Encoding.ASCII.GetBytes(loginResult), ClientVariables.KMac))
    //     {
    //         byte[] encryptedMessage = MAC.extractEncryptedContent(Encoding.ASCII.GetBytes(loginResult), ClientVariables.KMac);
    //         string jsonDecrypted = aes.Decrypt(encryptedMessage, ClientVariables.Kenc);
    //
    //         LoginResult result = JsonConvert.DeserializeObject<LoginResult>(jsonDecrypted);
    //
    //         if (result.Status.Equals(200))
    //         {
    //             NavManager.NavigateTo("/vote");
    //         }
    //         else
    //         {
    //             NavManager.NavigateTo("/error");
    //         }
    //
    //     }
    //     
    // }
    }

    private string signLoginForm(LoginForm loginForm, EllipticCurvePoint serverPuk)
    {
        return JsonConvert.SerializeObject(loginForm);
    }

    private bool verifyCA(InitialPackage certificate)
    {
        byte[] InitialPackagesignature = certificate.CertificateSignature;
        return true;
    }

    private void InvalidCredentials()
    {
        Console.WriteLine("Invalid Credentials");
    }
}